/* ----------------------Preliminary Declarations Section--------------------*/
   
import java_cup.runtime.*;
import java.util.*;
import Nodes.*;


/* error report */

parser code {:
    
    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {

            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal          SEMICOLON, MAINCLASS, PUBLIC, STATIC, VOID, MAIN, COMMA,
                  LPAREN, RPAREN, LCBRA, RCBRA, INT, FLOAT, ASSIGN, ADD, MINUS, MULTI, DIV;

terminal Operator NOTEQUAL, EQUAL, GREAT, LESS, LESSQ, GREATQ;

terminal String     WHILE, IF, FOR, PRINT, ELSE, ID, NUM ;


   
/* Non terminals used in the grammar section.*/

nonterminal    ProgramNode PROGRAM;
nonterminal    NULL_STMT;
nonterminal ArrayList<String>  ID_LIST; 
nonterminal VariableType TYPE;

nonterminal StatementListNode STMT_LIST, COMP_STMT ;
nonterminal StatementNode ASSIGN_STMT, FOR_STMT, WHILE_STMT, IF_STMT, STMT, DECLARATION;
nonterminal ExpressionNode  ASSIGN_EXPR, BOOL_EXPR, EXPRRVAL, OPASSIGN_EXPR, OPBOOL_EXPR, RVAL, TERM, FACTOR, EXPR;
nonterminal Operator C_OP;

precedence left  ADD, MINUS;
precedence left  MULTI, DIV;


start with PROGRAM;

/* ----------------------------Grammar Section-------------------- */
   
/* The grammar for our parser. */

   PROGRAM ::= MAINCLASS ID:id LCBRA PUBLIC STATIC VOID MAIN LPAREN RPAREN COMP_STMT:compStmt RCBRA
               {:
                  RESULT = new ProgramNode (id, compStmt);
               :};

   COMP_STMT ::= LCBRA STMT_LIST:stmtList RCBRA
                  {:
                     RESULT = stmtList;
                  :};

   STMT_LIST ::= 
                  {:
                     RESULT = new StatementListNode();
                  :}
                 |  
                  STMT_LIST:stmtList STMT:stmt
                  {:
                     stmtList.addStatement(stmt);
                     RESULT = stmtList;
                  :};

   STMT ::=   ASSIGN_STMT:assignStmt
            {:
               RESULT = assignStmt;
            :}
            | FOR_STMT:forstmt
            {:
               RESULT = forstmt;
            :}
            | WHILE_STMT:whilestmt
            {:
               RESULT = whilestmt;
            :}
            | IF_STMT:ifstmt
            {:
               RESULT = ifstmt;
            :}
            | COMP_STMT:compstmt
            {:
               RESULT = compstmt;
            :}
            | DECLARATION:decstmt
            {:
               RESULT = decstmt;
            :}
            | NULL_STMT:nullstmt
            {:
               RESULT = new NullStmtNode();
            :}
            | error SEMICOLON
            | PRINT LPAREN EXPR:expr RPAREN SEMICOLON
            {:
               RESULT = new FunctionCallNode("println", expr);
            :};

   DECLARATION ::= TYPE:type ID_LIST:list SEMICOLON 
                     {:
                        RESULT = new DeclarationStmtNode (type, list);
                     :};


   TYPE  ::=   INT
               {:
                  RESULT = VariableType.INT;
               :}
              | 
               FLOAT
               {:
                  RESULT = VariableType.FLOAT;
               :};

   NULL_STMT ::= SEMICOLON;

   ID_LIST  ::=   ID:id COMMA ID_LIST:list
                  {:
                     list.add(0, id);
                     RESULT = list;
                  :}
                 | 
                  ID:id
                  {:
                     ArrayList <String> list = new ArrayList <String>();
                     list.add(0, id);
                     RESULT = list;
                  :}
                  ;
   
   ASSIGN_STMT ::= ASSIGN_EXPR:assignExpr SEMICOLON
                  {:
                     RESULT = new AssignStmtNode(assignExpr);
                  :};
                   
   ASSIGN_EXPR ::= ID:id ASSIGN EXPR:expr
                   {:
                     IdNode idNode = new IdNode(id, idxleft.getColumn(), idxright.getLine());
                     RESULT = new AssignExpressionNode (idNode, expr);
                   :};

   EXPR  ::=    ASSIGN_EXPR:assignExpr 
               {:
                  RESULT = assignExpr;
               :}
              | 
               RVAL:rval
               {:
                     RESULT = rval;
               :};

   FOR_STMT ::= FOR LPAREN OPASSIGN_EXPR:opAssignExpr1 SEMICOLON OPBOOL_EXPR:opBoolExpr SEMICOLON OPASSIGN_EXPR:opAssignExpr2 RPAREN STMT:stmt
               {:
                  RESULT = new ForStmtNode(opAssignExpr1, opBoolExpr, opAssignExpr2, stmt);
               :};
   
   
   WHILE_STMT ::= WHILE:whileStmt LPAREN BOOL_EXPR:boolExpr RPAREN STMT:stmt
                  {:
                     RESULT = new WhileStmtNode(boolExpr, stmt);
                  :};

   IF_STMT ::=    IF LPAREN BOOL_EXPR:boolExpr RPAREN STMT:stmt1 ELSE STMT:stmt2 
                  {:
                     RESULT = new IfStmtNode (boolExpr, stmt1, stmt2);
                  :} 
               |  
                  IF LPAREN BOOL_EXPR:boolExpr RPAREN STMT:stmt
                  {:
                     RESULT = new IfStmtNode (boolExpr, stmt);
                  :};
   
   OPASSIGN_EXPR ::=    ASSIGN_EXPR:assignExpr 
                        {:
                           RESULT = assignExpr;
                        :}
                        | ;


   OPBOOL_EXPR ::=    BOOL_EXPR:boolExpr 
                     {:
                        RESULT = boolExpr;
                     :}
                     | ;

   BOOL_EXPR::= EXPR:expr1 C_OP:operator EXPR:expr2
               {:
                  RESULT = new BoolExpressionNode (expr1, operator, expr2);
               :};

   C_OP::=     EQUAL 
               {: 
                  RESULT = Operator.EQUAL;
               :}
            | 
               GREAT
               {: 
                  RESULT = Operator.GREAT;
               :}
            |  
               LESS
               {: 
                  RESULT = Operator.LESS;
               :}
            |  
               GREATQ
               {: 
                  RESULT = Operator.GREATQ;
               :}
            |  
               LESSQ
               {: 
                  RESULT = Operator.LESSQ;
               :}
            |  
               NOTEQUAL
               {: 
                  RESULT = Operator.NOTEQUAL;
               :};

   RVAL  ::=      RVAL:rval ADD TERM:term
                  {:
                     RESULT = new AdditionNode (rval, term);
                  :}
               |  
                  RVAL:rval MINUS TERM:term
                  {:
                     RESULT = new SubstructionNode (rval, term);
                  :}
               | 
                  TERM:term
                  {:
                     RESULT = term;
                  :};

   TERM ::=    TERM:term MULTI FACTOR:factor
               {:
                  RESULT = new MultiNode (term, factor);
               :}
            |  
               TERM:term DIV FACTOR:factor
               {:
                  RESULT = new DivisionNode (term, factor);
               :}
            |  
               FACTOR:factor
               {:
                  RESULT = factor;
               :};

   FACTOR ::=     LPAREN EXPR:expr RPAREN
                  {:
                     RESULT = expr;
                  :}
               |  
                  MINUS FACTOR:factor
                  {:
                      RESULT = new NegateNode( factor );
                  :}
               |  
                  ID:id
                  {:
                     RESULT = new IdNode(id, idxleft.getColumn(), idxright.getLine());
                  :}
               |  
                  NUM:number
                  {:
                     RESULT = new NumberNode(number);
                  :};